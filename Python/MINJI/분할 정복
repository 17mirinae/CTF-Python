1단계-No.2630-색종이 만들기
import sys
n=int(sys.stdin.readline())
 
color_paper=[list(map(int,sys.stdin.readline().split())) for _ in range(n)]#x행 y열
 
white=0#0이면 흰생
blue=0#1이면 파란색
 
def cut(x,y,n):
    global blue,white
    check=color_paper[x][y]
    for i in range(x,x+n):
        for j in range(y,y+n):
            if check!=color_paper[i][j]:#하나라도 같은색이 아니라면
                #4등분
                cut(x,y,n//2)#1사분면
                cut(x,y+n//2,n//2)#2사분면
                cut(x+n//2,y,n//2)#3사분면
                cut(x+n//2,y+n//2,n//2)#4사분면
                return
 
 
    if check==0:#모두 흰색일때
        white+=1
        return
    else:   #모두 파란색일때
        blue+=1
        return
 
 
cut(0,0,n)
print(white)
print(blue)

2단계-No.1992-쿼드트리
N = int(input())

image = [list(map(int, input())) for _ in range(N)]

def quadtree(x, y, n):
    # n = 1, 하나의 픽셀만 볼 경우,
    if(n == 1):
        return str(image[x][y])
    
    result = []
    for i in range(x, x + n):
        for j in range(y, y + n):
            # 색이 다르면, 다시 분할하자.
            if(image[i][j] != image[x][y]):
                # append와 extend의 차이는
                # extend는 list, tuple, dict 등의 iterable object를
                # python list의 끝에 append 해주는 것.
                result.append('(')
                result.extend(quadtree(x, y, n//2))
                result.extend(quadtree(x, y + n//2, n//2))
                result.extend(quadtree(x + n//2, y, n//2))
                result.extend(quadtree(x + n//2, y + n//2, n//2))
                result.append(')')
                
                return result
            
    return str(image[x][y])
    
print(''.join(quadtree(0, 0, N)))

3단계-No.1780-종이의 개수
N = int(input())

paper = [list(map(int, input().split())) for _ in range(N)]

neg = 0
neut = 0
pos = 0

def clip_paper(x, y, n):
    global neg, neut, pos
    
    num_check = paper[x][y]
    for i in range(x, x + n):
        for j in range(y, y + n):
            if(paper[i][j] != num_check):
                for k in range(3):
                    for l in range(3):
                        clip_paper(x + k * n//3, y + l * n//3, n//3)
                return
            
    if(num_check == -1):
        neg += 1
    elif(num_check == 0):
        neut += 1
    else:
        pos += 1
        
clip_paper(0, 0, N)
print(f'{neg}\n{neut}\n{pos}')

4단계-No.1629-곱셈
import sys

A, B, C = map(int, sys.stdin.readline().split())

memos = {1:A%C}

def mul(A, B): 
    return ((A%C) * (B%C))%C
def process(k): 
    if (k in memos.keys()):
        return memos[k]
    q = int(k / 2)
    data = mul(process(q), process(k-q))
    memos[k] = data
    return data
print(process(B))

5단계-No.11401-이항 계수-3
설명 - https://jda2002.tistory.com/entry/BOJ-%EB%B0%B1%EC%A4%80-11401%EB%B2%88-%EC%9D%B4%ED%95%AD-%EA%B3%84%EC%88%98-3
n, k = map(int,input().split())
p = 1000000007
def mul(a,b):
    if b == 0:
        return 1
    elif b == 1:
        return a
    elif b % 2 > 0:
        return mul(a, b-1) * a
    else:
        d = mul(a, b // 2)
        d %= p
        return d ** 2 % p
    
A = 1
B = 1
for i in range(1,n+1):
    A *= i
    A %= p
for i in range(1, k+1):
    B *= i
    B %= p
for i in range(1, n-k+1):
    B *= i
    B %= p
    
B = mul(B,(p-2) % p)
print((A * B) % p)

6단계-No.2740-행렬 곱셈
import sys
N,M=map(int,sys.stdin.readline().split())
A=[list(map(int,sys.stdin.readline().split())) for _ in range(N)]
 
Nb,Mb=map(int,sys.stdin.readline().split())
B=[list(map(int,sys.stdin.readline().split())) for _ in range(Nb)]
 
 
result=[]
tmp=0
tmp_li=[]
for i in range(N):#A에 1행부터 N행까지
    for j in range(Mb):#B에 M열 까지
        for k in range(M): #A에 열
            tmp+=A[i][k]*B[k][j]
        tmp_li.append(tmp)
        tmp=0
    result.append(tmp_li)
    tmp_li=[]
 
 
for li in result:
    for p in li:
        print(p,end=' ')
    print()

7단계-No.10830-행렬 제곱
#행렬 곱셈 함수
def matrix_mul(a, b):
    result = [[0]* N for _ in range(N)]
    for i in range(N):
        for j in range(N):
            for k in range(N):
                result[i][j] += a[i][k] * b[k][j]
    
    for i in range(N):
        for j in range(N):
            result[i][j] %= 1000
                
    return result
    
    
#2진법으로 변환하여 분할정복 실행
N, B = map(int, input().split())
matrix = [list(map(int, input().split())) for _ in range(N)]
B = bin(B)[2:] #2진법으로 변환

#단위 행렬
identity_matrix = [[1 if i == j else 0 for i in range(N)] for j in range(N)]

#2진법 자릿수 만큼 제곱 & 제곱한 행렬 끼리 곱해줌
result = identity_matrix[:]
for i in range(len(B)):
    if B[-i-1] == '1':
        temp = matrix[:]
        while i != 0:
            temp = matrix_mul(temp, temp)
            i -= 1
        result = matrix_mul(result, temp)

for row in result:
    print(*row)

8단계-No.2749-피보나치 수-3
#2^x 피보나치를 구해주는 함수
def matrix_mul_self(x):
    base = [[1, 1], [1, 0]]
    result = [[1, 1], [1, 0]]
    for _ in range(x):
        result = [[0, 0], [0, 0]]
        for i in range(2):
            for j in range(2):
                for k in range(2):
                    result[i][j] += (base[i][k] * base[k][j]) % 1000000
        base = result
        
    return result

#2*2 두 행렬의 곱을 구해주는 함수
def matrix_mul(a, b):
    result = [[0 ,0], [0, 0]]
    for i in range(2):
        for j in range(2):
            for k in range(2):
                result[i][j] += (a[i][k] * b[k][j]) % 1000000
                
    return result

n = bin(int(input()))[2:] #2진법으로 변환

result = [[1, 0], [0, 1]]
for i in range(len(n)):
    if n[-i-1] == '1': #2^x 피보나치들만 구해준 다음 곱해줌
        result = matrix_mul(result, matrix_mul_self(i))
        
print(result[0][1] % 1000000)

9단계-No.6549-히스토그램에서 가장 큰 직사각형
while True:
    N, *l=list(map(int, input().split()))
    l.append(0)
    if N == 0: break
    s=[]
    a=0
    for i,h in enumerate(l):
        while s and l[s[-1]]>h:
            ih=l[s.pop()]
            # s의 높이!
            w=i-s[-1]-1 if s else i
            # i에서부터 s의 top까지의 거리를 가로길이로 한다.
            # w = i일때는 마지막일 때
            if a<w*ih: a=w*ih
        s.append(i)
    print(a)

10단계-No.2261-가장 가까운 두 점
import sys
def dis(a,b):
    return (b[0]-a[0])**2 + (b[1]-a[1]) ** 2
def devi(st, en):
    leng = en - st
    if leng == 2:
        return dis(s[st], s[st+1])
    elif leng == 3:
        return min(dis(s[st], s[st+1]), dis(s[st+1], s[st+2]), dis(s[st], s[st+2]))
    
    leng = (st + en) // 2
    mid = s[leng][0]
    d = min(devi(st,leng), devi(leng, en))
    tmp = []
    for i in range(st,en):
        if (mid - s[i][0])**2 <= d:
            tmp.append(s[i])
    tmp.sort(key = lambda x:x[1])
    m = d
    tmp_len = len(tmp)
    if tmp_len >= 2:
        for i in range(tmp_len -1):
            for j in range(i+1, tmp_len):
                if (tmp[i][1] - tmp[j][1]) **2 > d:
                    break
                elif tmp[i][0] < mid and tmp[j][0] < mid:
                    continue
                elif tmp[i][0] > mid and tmp[j][0] > mid:
                    continue
                m = min(m, dis(tmp[i],tmp[j]))
    return m
    
li = []
for _ in range(int(input())):
    li.append(list(map(int, sys.stdin.readline().split())))
s = list(set(map(tuple,li)))
if len(s) != len(li):
    print("0")
else:
    s.sort()
    d = devi(0,len(s))
    print(d)
