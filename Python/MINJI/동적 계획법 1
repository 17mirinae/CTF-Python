1단계-No.2748-피보나치 수-2
num = int(input())

arr = [0 for _ in range(num + 1)]

arr[1] = 1

for i in range(2, num + 1):
    arr[i] = arr[i - 1] + arr[i - 2]

print(arr[-1])

2단계-No.1003-피보나치 함수
def fib(num):
    countZero = [1, 0]
    countOne = [0, 1]
    
    if num <= 1:
        return
    
    for i in range(2, num + 1):
        countZero.append(countZero[i - 1] + countZero[i - 2])
        countOne.append(countOne[i - 1] + countOne[i - 2])
    
    return countZero, countOne

turn = int(input()) # 테스트 케이스의 개수

countZero, countOne = fib(40) # 수열 만들어주기

for _ in range(turn):
    num = int(input())
    print("%d %d" %(countZero[num], countOne[num]))

3단계-No.1904-01타일
num = int(input())

arr = [0 for _ in range(1000001)]
arr[1] = 1
arr[2] = 2

for i in range(3, num + 1):
    arr[i] = ((arr[i - 2] % 15746) + (arr[i - 1] % 15746)) % 15746

print(arr[num])

4단계-No.9461-파도반 수열
turn = int(input())

arr = [0 for _ in range(101)]

arr[0] = 1
arr[1] = 1
arr[2] = 1

for i in range(3, 101):
    arr[i] = arr[i - 2] + arr[i - 3]

for i in range(turn):
    num = int(input())
    print(arr[num - 1])

5단계-No.1149-RGB거리
turn = int(input())

arr = []

for i in range(turn):
    arr.append(list(map(int, input().split())))

for i in range(1, len(arr)):
    arr[i][0] = min(arr[i - 1][1], arr[i - 1][2]) + arr[i][0]
    arr[i][1] = min(arr[i - 1][0], arr[i - 1][2]) + arr[i][1]
    arr[i][2] = min(arr[i - 1][0], arr[i - 1][1]) + arr[i][2]

print(min(arr[turn - 1][0], arr[turn - 1][1], arr[turn - 1][2]))

6단계-No.1932-정수 삼각형
turn = int(input())
triArr = [list(map(int, input().split())) for _ in range(turn)]

for i in range(turn - 1):
    for j in range(len(triArr[i + 1])):
        # 첫 번째와 끝 부분은 그냥 더해준다.
        if(j == 0):
            triArr[i + 1][j] = triArr[i][j] + triArr[i + 1][j]
        elif(j == len(triArr[i + 1]) - 1):
            triArr[i + 1][-1] = triArr[i][-1] + triArr[i + 1][-1]
        else:
            triArr[i + 1][j] = max(triArr[i][j - 1] + triArr[i + 1][j], triArr[i][j] + triArr[i + 1][j])

print(max(triArr[-1]))

7단계-No.2579-계단 오르기
n = int(input())
s = [0 for i in range(301)] # 점수 리스트
dp = [0 for i in range(301)] # 점수의 합 저장

for i in range(n):
    s[i] = int(input())

dp[0] = s[0] # 첫 번째 점수
dp[1] = s[0] + s[1] # 첫 번째 점수와 두 번째 점수를 합한 값
dp[2] = max(s[1] + s[2], s[0] + s[2])
for i in range(3, n):
    dp[i] = max(dp[i - 3] + s[i - 1] + s[i], dp[i - 2] + s[i])
    # 마지막 계단의 전 계단을 밟은 경우와
    # 마지막 계단의 전 계단을 밟지 않은 경우
print(dp[n - 1])

8단계-No.1463-1로 만들기
turn = int(input())

result = [0 for _ in range(turn + 1)]

for i in range(1, turn + 1):
    if i == 1:
        result[i] = 0
        continue
    result[i] = result[i - 1] + 1
    if i % 3 == 0 and result[i // 3] + 1 < result[i]:
        result[i] = result[i // 3] + 1
    if i % 2 == 0 and result[i // 2] + 1 < result[i]:
        result[i] = result[i // 2] + 1

print(result[turn])

9단계-No.10844-쉬운 계단 수
n = int(input())
dp = [[0 for i in range(10)] for j in range(101)]
for i in range(1, 10):
    dp[1][i] = 1
for i in range(2, n + 1):
    for j in range(10):
        if j == 0:
            dp[i][j] = dp[i - 1][1]
        elif j == 9:
            dp[i][j] = dp[i - 1][8]
        else:
            dp[i][j] = dp[i - 1][j - 1] + dp[i - 1][j + 1]
print(sum(dp[n]) % 1000000000)

10단계-No.2156-포도주 시식
turn = int(input())
wineArr = [int(input()) for i in range(turn)]

dp = [0]
dp.append(wineArr[0])
if turn > 1:
    dp.append(wineArr[0] + wineArr[1])

# 이번 포도주 + 이전 포도주 X
# 이번 포도주 + 이전 포도주 O
# 이번 포도주 X

for i in range(3, turn + 1):
    first = wineArr[i - 1] + dp[i - 2]
    second = wineArr[i - 1] + wineArr[i - 2] + dp[i - 3]
    third = dp[i - 1]
    maxRes = max(first, second, third)
    
    dp.append(maxRes)

print(dp[turn])

11단계-No.11053-가장 긴 증가하는 부분 수열
num = int(input())
numArr = list(map(int, input().split()))
dp = [0 for _ in range(num)]

for i in range(num):
    for j in range(i):
        if numArr[i] > numArr[j] and dp[i] < dp[j]:
            dp[i] = dp[j]
    dp[i] += 1

print(max(dp))

12단계-No.11054-가장 긴 바이토닉 부분 수열
size = int(input())
numArr = list(map(int, input().split()))
dp_left = [1] * size
dp_right = [1] * size

for i in range(size):
    for j in range(i):
        if numArr[j] < numArr[i]:
            if dp_left[i] < dp_left[j] + 1:
                dp_left[i] = dp_left[j] + 1

for i in range(size - 1, -1, -1):
    for j in range(size - 1, i, -1):
        if numArr[j] < numArr[i]:
            if dp_right[i] < dp_right[j] + 1:
                dp_right[i] = dp_right[j] + 1

dp = [dp_left[i] + dp_right[i] for i in range(size)]

print(max(dp) - 1)

13단계-No.2565-전깃줄
num = int(input())
line = [list(map(int, input().split())) for _ in range(num)]
line = sorted(line, key = lambda x : x[0])

dp = [0] * num
dp[0] = 1

for i in range(1, num):
    minNum = 0
    for j in range(i):
        if line[i][1] > line[j][1]:
            minNum = max(dp[j], minNum)
    dp[i] = minNum + 1

print(num - max(dp))

14단계-No.9251-LCS
a = [x for x in input()]
b = [x for x in input()]
alen = len(a)
blen = len(b)
dp = [[0] * (alen + 1) for _ in range(blen + 1)]

# dp[i][j] : i번째 문자와 j번째 문자 사이의 LCS길이
for i in range(1, blen + 1):
    for j in range(1, alen + 1):
    # 1 : 왼쪽값과 위쪽값, 현재까지 LCS의 최댓값을 찾기 위한 조건
    # 2 : 왼쪽 대각선 값 + 1, 과거 LCS 최댓값에 같은 문자열이므로 + 1
        dp[i][j] = max(dp[i][j - 1], dp[i - 1][j], dp[i - 1][j - 1] + (a[j - 1] == b[i - 1]))
print(dp[blen][alen])

15단계-No.1912-연속합
num = int(input())
numArr = list(map(int, input().split()))
sum = [numArr[0]]

for i in range(len(numArr) - 1):
    sum.append(max(sum[i] + numArr[i + 1], numArr[i + 1]))

print(max(sum))

16단계-No.12865-평범한 배낭
import sys

N, K = map(int, input().split())
stuff = [[0,0]]
knapsack = [[0 for _ in range(K + 1)] for _ in range(N + 1)]

for _ in range(N):
    stuff.append(list(map(int, input().split())))


#냅색 문제 풀이
for i in range(1, N + 1):
    for j in range(1, K + 1):
        weight = stuff[i][0] 
        value = stuff[i][1]
       
        if j < weight:
            knapsack[i][j] = knapsack[i - 1][j] #weight보다 작으면 위의 값을 그대로 가져온다
        else:
            knapsack[i][j] = max(value + knapsack[i - 1][j - weight], knapsack[i - 1][j])

print(knapsack[N][K])
