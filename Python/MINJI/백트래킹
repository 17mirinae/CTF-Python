1단계-No.15649-N과 M-1
n, m = map(int, input().split())

check = [False] * (n + 1)
numArr = [0] * m

def solve(index, n, m):
    if index == m:
        for i in range(m):
            print(numArr[i], end = ' ')
        print()
        return
    for i in range(1, n + 1):
        if check[i]:
            continue
        check[i] = True
        numArr[index] = i
        solve(index + 1, n, m)
        check[i] = False
        
solve(0, n, m)

2단계-No.15650-N과 M-2
def f(n,m,k,l):
    if(n == k):
        print(*res)
        return
    else:
        for i in range(m):
            if(visited[i]==0 and l<arr[i]):
                visited[i] = 1
                l = arr[i]
                res[n] = arr[i]
                f(n+1,m,k,l)
                visited[i] = 0

n, m  = map(int, input().split())

arr = range(1,n+1)
visited = [0 for i in range(n)]
res = [0] * m
f(0,n,m,0)

3단계-No.15651-N과 M-3
def f(n,m,k):
    if(n == k):
        print(*res)
        return
    else:
        for i in range(m):
            visited[i] = 1
            res[n] = arr[i]
            f(n+1,m,k)
            visited[i] = 0


n, m = map(int, input().split())
arr = range(1,n+1)
visited = [0 for i in range(n)]
res = [0] * m
f(0,n,m)

4단계-No.15652-N과 M-4
def f(n,m,k,l):
    if(n == k):
        print(*res)
        return
    else:
        for i in range(m):
            if(arr[i] >= l):
                visited[i] = 1
                l = arr[i]
                res[n] = arr[i]
                f(n+1,m,k,l)
                visited[i] = 0

n, m = map(int, input().split())
arr = range(1,n+1)
visited = [0 for i in range(n)]
res = [0] * m
f(0,n,m,0)

5단계-No.9663-N-Queen (PyPy3로 제출)
#내 윗줄에 나와 겹치는 라인에 퀸이 있는가?
def adjacent(x):
    for i in range(x):
        if row[x] == row[i] or abs(row[x] - row[i]) == x - i:
            return False
    return True
        
        
#한줄씩 재귀하며 DFS를 실행
def dfs(x):
    global result
    
    if x == N:
        result += 1

    else:
        for i in range(N):
            row[x] = i
            if adjacent(x):
                dfs(x + 1)

N = int(input())
row = [0] * N
result = 0
dfs(0)
print(result)

6단계-No.2580-스도쿠 (PyPy3로 제출)
sudoku = [list(map(int, input().split())) for _ in range(9)]
#해결해야될 칸만 받음
zeros = [(i, j) for i in range(9) for j in range(9) if sudoku[i][j] == 0]

def is_promising(i, j):
    promising = [1,2,3,4,5,6,7,8,9]  
    
    #행열 검사
    for k in range(9):
        if sudoku[i][k] in promising:
            promising.remove(sudoku[i][k])
        if sudoku[k][j] in promising:
            promising.remove(sudoku[k][j])
            
    #3*3 박스 검사
    i //= 3
    j //= 3
    for p in range(i*3, (i+1)*3):
        for q in range(j*3, (j+1)*3):
            if sudoku[p][q] in promising:
                promising.remove(sudoku[p][q])
    
    return promising

flag = False #답이 출력되었는가?
def dfs(x):
    global flag
    
    if flag: #이미 답이 출력된 경우
        return
        
    if x == len(zeros): #마지막 0까지 다 채웠을 경우
        for row in sudoku:
            print(*row)
        flag = True #답 출력
        return
        
    else:    
        (i, j) = zeros[x]
        promising = is_promising(i, j) #유망한 숫자들을 받음
        
        for num in promising:
            sudoku[i][j] = num #유망한 숫자 중 하나를 넣어줌
            dfs(x + 1) #다음 0으로 넘어감
            sudoku[i][j] = 0 #초기화 (정답이 없을 경우를 대비)
dfs(0)

7단계-No.14888-연산자 끼워넣기
from itertools import permutations #순열 함수

N = int(input())
A = list(map(int, input().split()))
plus, minus, multiple, division = map(int, input().split())

#각각의 연산자를 모두 입력
operation_list = []
operation_list += [1] * plus
operation_list += [2] * minus
operation_list += [3] * multiple
operation_list += [4] * division

#중복되지 않게 연산자 셋을 종류별로 만들어줌
operation_set = []
for numbers in list(permutations(operation_list)):
    operation_set.append(numbers)
operation_set = list(set(operation_set)) #중복 제거

#+, -, *, //가 나올 경우를 나누어준다
max_answer = -1000000001
min_answer = 1000000001
for case in operation_set:
    answer = A[0] #첫 값 대입
    
    for i in range(N-1):
        if case[i] == 1:
            answer += A[i+1]
        elif case[i] == 2:
            answer -= A[i+1]
        elif case[i] == 3:
            answer *= A[i+1]
        elif case[i] == 4: #나눗셈 정의를 문제에 따라줌
            if answer < 0: 
                answer = -(-answer // A[i+1])
            else:
                answer //= A[i+1]
                
    #최댓값 최솟값일 경우
    if answer < min_answer:
        min_answer = answer
    if answer > max_answer:
        max_answer = answer
    
print(max_answer)
print(min_answer)

8단계-No.14889-스타트와 링크
from itertools import combinations #조합 함수

N = int(input())
S = [list(map(int, input().split())) for _ in range(N)]
members = [i for i in range(N)]
possible_team = []

#조합으로 가능한 팀 생성해주기
for team in list(combinations(members, N//2)):
    possible_team.append(team)

min_stat_gap = 10000 #갭이 가장 작은 값을 찾기 위하여
for i in range(len(possible_team)//2):
    #A 팀
    team = possible_team[i]
    stat_A = 0 #A팀 능력치
    for j in range(N//2):
        member = team[j] #멤버
        for k in team:
            stat_A += S[member][k] #멤버와 함께할 경우의 능력치들
            
    #A를 제외한 나머지 팀
    team = possible_team[-i-1]
    stat_B = 0
    for j in range(N//2):
        member = team[j]
        for k in team:
            stat_B += S[member][k]
            
    min_stat_gap = min(min_stat_gap, abs(stat_A - stat_B))
    
print(min_stat_gap)
