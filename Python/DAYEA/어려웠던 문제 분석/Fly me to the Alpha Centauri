이전 작동시기에 k광년을 이동하였을 때 k-1, k 혹은 k+1 광년만을 다시 이동할 수 있다.
이 장치를 처음 작동시킬 경우 -1, 0, 1 광년을 이론상 이동할 수 있으나 사실상 음수 혹은 0 거리만큼의 이동은 의미가 없으므로 1 광년을 이동할 수 있다.
하지만 y지점에 도착해서도 공간 이동장치의 안전성을 위하여 y지점에 도착하기 바로 직전의 이동거리는 반드시 1광년으로 하려 한다.
-> 이전 시기의 이동 거리에 의해 다음 시기의 이동거리가 정해지고, 마지막 이동거리는 1 광년이 되어야한다. 이를 통해 이동거리는 한 기점을 기준으로 증가하다가 감소하는 추세를 보여야 한다는 것을 유추할 수 있다.

거리	    이동 방식	         최소 횟수
1       1   		                1
2       1, 1		                2
3	      1, 1, 1		              3
4	      1, 2, 1		              3
5	      1, 2, 1, 1		          4
6	      1, 2, 2, 1		          4
7	      1, 2, 2, 1, 1	          5
8	      1, 2, 2, 2, 1	          5
9	      1, 2, 3, 2, 1	          5
10	    1, 2, 3, 2, 1, 1	      6 
11	    1, 2, 3, 2, 2, 1	      6
12	    1, 2, 3, 3, 2, 1	      6
13	    1, 2, 3, 3, 2, 1, 1	    7
14	    1, 2, 3, 3, 2, 2, 1	    7
15	    1, 2, 3, 3, 3, 2, 1	    7
16	    1, 2, 3, 4, 3, 2, 1	    7
              	…	
-> 서로 인접한 제곱수의 절반을 기준으로 횟수가 상승한다.


다예 코드
import sys
import math

T = int(sys.stdin.readline())
result = []

for _ in range(T):
    x, y = map(int, sys.stdin.readline().split())
    distance = y - x

    factor = math.ceil(math.sqrt(distance))	# 제곱근을 올림한 값

    flag1 = (factor - 1) ** 2	# 거리 값보다 작은 제곱수
    flag2 = factor ** 2		# 거리 값보다 큰 제곱수

    if distance >= (flag1 + flag2) / 2:	# 양 제곱수의 중간 값을 기준으로 최소 횟수가 결정
        res = factor * 2 – 1		# 중간 값보다 크다면
    else:
        res = factor * 2 – 2		# 중간 값보다 작다면

    result.append(res)

for i in result:
    print(i)


석찬 & 민지 코드
-> 함수 사용에 차이가 있지만, 알고리즘은 동일
def solve(d):
    i = j = 1
    cnt = 0
    while d > 0:  # 시작점과 도착점 양쪽에서 감소시키는 형식
        d -= i
        i += 1
        cnt += 1  # 감소 후 cnt값을 적용하여 반복되는 감소가 없도록 함
        if d >= j:
            d -= j
            cnt += 1
            j += 1

    return cnt

for _ in range(int(input())):
    x, y = map(int, input().split())
    print(solve(y - x))
   
명근 코드   
def X(a):
    i=1
    while True:
    # 횟수가 제곱값과 제곱근을 기준으로 나뉜다는 것을 이용하여 범위를 나누고, 입력값이 해당되는 범위의 값을 리턴
        if i*i-i+1<=a<=i*i:   # 제곱근만큼 작은 값 초과 제곱값 이하
            print(2*i-1)
            break
        elif i*i+1<=a<=i*i+i: # 제곱값 초과 제곱근 만큰 큰 값 초과
            print(2*i)
            break
        i+=1
        
a=int(input())

for i in range(a):
    b,c=map(int,input().split())
    X(c-b)
